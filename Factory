from __future__ import annotations
from abc import ABC, abstractmethod


class Creator(ABC):

    
    def factory(self):
        pass

    def some_operation(self) -> str:

        # Cria o produto chamando o factory
        product = self.factory()

        # Usa o Produto.
        result = f"Criador: O mesmo código do criador acabou de funcionar com {product.operation()}"
        return result

class ConcreteCreator1(Creator):

    def factory(self) -> Product:
        return ConcreteProduct1()


class ConcreteCreator2(Creator): 

    def factory(self) -> Product:
        return ConcreteProduct2()


class Product(ABC):

    def operation(self) -> str:
        pass


class ConcreteProduct1(Product):

    def operation(self) -> str:
        return

class ConcreteProduct2(Product):

    def operation(self) -> str:
        return


def client_code(creator: Creator) -> None:

    print(f"Cliente: Não estou ciente da classe do criador, mas ainda funciona.\n"
          f"{creator.some_operation()}", end="")


if __name__ == "__main__":
    print("App: começa com ConcreteCreator1.")
    client_code(ConcreteCreator1())
    print("\n")

    print("App: começa com ConcreteCreator2.")
    client_code(ConcreteCreator2())
